name: Deploy Node.js App no AWS EKS

env:
  AWS_REGION: us-east-2
  AWS_ASSUME_ROLE: arn:aws:iam::087983370089:role/fiap-pos
  #ECR_REGISTRY: 881307377501.dkr.ecr.us-east-2.amazonaws.com/cormus
  ECR_REPOSITORY: cormus

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Instalar dependências
      run: npm install

    - name: Rodar testes com cobertura
      run: npm run test

    - name: Validar cobertura mínima
      run: |
        COVERAGE=$(node -pe "require('./coverage/coverage-summary.json').total.statements.pct")
        echo "Cobertura de statements: $COVERAGE%"
        if [ \"$COVERAGE\" -lt 80 ]; then
          echo "Cobertura abaixo de 80%"
          exit 1
        fi
  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR 
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG